<?php

/**
 * @file
 * Code for the eReol Video feature.
 */

include_once 'ereol_video.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function ereol_video_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes'] += array(
    'video_frontpage' => array(
      'label' => t('Video on frontpage'),
      'custom settings' => TRUE,
    ),
    'video_show' => array(
      'label' => t('Video player'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ereol_video_menu() {
  $items = array();

  $items['video/%node/view'] = array(
    'page callback' => 'ereol_video_view_video',
    'page arguments' => array(1),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_preprocess_node().
 */
function ereol_video_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($node->type == "video" && $variables['view_mode'] == 'teaser') {
    drupal_add_library('system', 'drupal.ajax');
    $variables['link'] = 'video/' . $node->nid . '/view';
  }
}

/**
 * View a video from modal.
 *
 * @param object $node
 *   The video node.
 *
 * @return array
 *   Ajax render array.
 */
function ereol_video_view_video($node) {
  $commands = array();
  $commands[] = ajax_command_ding_popup('ereol_video', t('View video'), drupal_render(node_view($node, 'full')), array('refresh' => TRUE, 'class' => array('video-modal')));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_preprocess_entity().
 */
function ereol_video_preprocess_entity(&$variables) {
  if ('paragraphs_item' === $variables['entity_type']
  && 'video_bundle' === $variables['paragraphs_item']->bundle()) {
    $wrapper = $variables['paragraphs_item']->wrapper();

    $color = $wrapper->field_link_color->value();
    if (isset($color['rgb'])) {
      $variables['classes_array'][] = 'video-bundle-colored';
      $variables['classes_array'][] = '#000000' === _ereol_video_get_contrast_color($color['rgb']) ? 'video-bundle-color-dark' : 'video-bundle-color-light';
      $variables['attributes_array']['style'] = 'background-color: ' . $color['rgb'] . ';';
    }
  }
}
/**
 * Compute contrast color.
 *
 * @param string $hex_color
 *   The color as a hex string (#rrggbb).
 *
 * @return string
 *   The contrast color as a hex string (#rrggbb).
 *
 * @see https://stackoverflow.com/a/42921358
 */
function _ereol_video_get_contrast_color($hex_color) {
  // hexColor RGB.
  $r1 = hexdec(substr($hex_color, 1, 2));
  $g1 = hexdec(substr($hex_color, 3, 2));
  $b1 = hexdec(substr($hex_color, 5, 2));

  // Black RGB.
  $blackColor = "#000000";
  $r2BlackColor = hexdec(substr($blackColor, 1, 2));
  $g2BlackColor = hexdec(substr($blackColor, 3, 2));
  $b2BlackColor = hexdec(substr($blackColor, 5, 2));

  // Calc contrast ratio.
  $l1 = 0.2126 * pow($r1 / 255, 2.2) +
    0.7152 * pow($g1 / 255, 2.2) +
    0.0722 * pow($b1 / 255, 2.2);

  $l2 = 0.2126 * pow($r2BlackColor / 255, 2.2) +
    0.7152 * pow($g2BlackColor / 255, 2.2) +
    0.0722 * pow($b2BlackColor / 255, 2.2);

  $contrastRatio = 0;
  if ($l1 > $l2) {
    $contrastRatio = (int) (($l1 + 0.05) / ($l2 + 0.05));
  }
  else {
    $contrastRatio = (int) (($l2 + 0.05) / ($l1 + 0.05));
  }

  // If contrast is more than 5, return black color.
  if ($contrastRatio > 5) {
    return '#000000';
  }
  else {
    // If not, return white color.
    return '#FFFFFF';
  }
}
