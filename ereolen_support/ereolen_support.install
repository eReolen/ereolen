<?php
/**
 * @file
 * Prepare site for ereolen support module.
 */

/**
 * Setup terms and vocabularies during install.
 */
function ereolen_support_install() {
  if (empty(taxonomy_vocabulary_machine_name_load('ereolen_support_product'))) {
    // Define product list.
    $product_terms =[
      'ereolen.dk',
      'ereolengo.dk',
      'ereolenglobal.dk',
      'ereolen app',
      'ereolen go app',
      'Libby app'
    ];
    $vocabulary = new stdClass();
    $vocabulary->name = 'Ereolen support form products';
    $vocabulary->machine_name = "ereolen_support_product";
    $vocabulary->description = t('List of products used in support form');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
    _ereolen_support_create_terms($product_terms, $vid);
  }

  if (empty(taxonomy_vocabulary_machine_name_load('ereolen_support_problem'))) {
    // Define problem list.
    $problem_terms = [
      'Log ind',
      'Lån og reservationer',
      'Læs og lyt',
      'Download',
      'Forespørgsel på titel',
      'Fejlbeskeder',
      'Kvoter',
      'Tekniske spørgsmål'
    ];
    $vocabulary = new stdClass();
    $vocabulary->name = 'Ereolen support form problems';
    $vocabulary->machine_name = "ereolen_support_problem";
    $vocabulary->description = t('List of problems used in support form');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
    _ereolen_support_create_terms($problem_terms, $vid);
  }

  if (empty(taxonomy_vocabulary_machine_name_load('ereolen_support_book_type'))) {
    // Define book type list.
    $book_type_terms = [
      'Ebog',
      'Lydbog'
    ];
    $vocabulary = new stdClass();
    $vocabulary->name = 'Ereolen support form book types';
    $vocabulary->machine_name = "ereolen_support_book_type";
    $vocabulary->description = t('List of book types used in support form');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
    _ereolen_support_create_terms($book_type_terms, $vid);
  }

  if (empty(taxonomy_vocabulary_machine_name_load('ereolen_support_login_method'))) {
    // Define book type list.
    $login_method_terms = [
      'Bibliotekslogin/Lånerkort',
      'UniLogin'
    ];
    $vocabulary = new stdClass();
    $vocabulary->name = 'Ereolen support form login methods';
    $vocabulary->machine_name = "ereolen_support_login_method";
    $vocabulary->description = t('List of login methods used in support form');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
    _ereolen_support_create_terms($login_method_terms, $vid);
  }

  if (empty(taxonomy_vocabulary_machine_name_load('ereolen_support_device'))) {
    // Define device list.
    $device_terms = [
      'Desktop/Laptop computer',
      'Tablet',
      'Mobiltelefon',
      'Andet'
    ];
    $vocabulary = new stdClass();
    $vocabulary->name = 'Ereolen support form devices';
    $vocabulary->machine_name = "ereolen_support_device";
    $vocabulary->description = t('List of devices used in support form');
    $vocabulary->module = 'taxonomy';

    taxonomy_vocabulary_save($vocabulary);
    $vid = $vocabulary->vid;
    _ereolen_support_create_terms($device_terms, $vid);
  }
}

/**
 * Create terms programmatically.
 *
 * @param array $termnames
 *   A list of term names to add to a vocabulary.
 * @param $vid
 *   The vocabulary id.
 */
function _ereolen_support_create_terms($termnames, $vid) {
  foreach ($termnames as $termname) {
    // Create terms.
    $newterm = new stdClass();
    $newterm->name = $termname;
    $newterm->vid = $vid;
    $newterm->parent = 0;
    taxonomy_term_save($newterm);
  }
}

/**
 * Implements hook_schema().
 */
function ereolen_support_schema() {
  $schema['ereolen_support_errors'] = [
    'description' => 'Table for errors during support form submit',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for an entry',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'timestamp' => [
        'description' => 'The time of the error',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ],
      'request' => [
        'description' => 'The request sent to Jira',
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of data array that resulted in error',
      ],
    ],
    'primary key' => [
      'id',
    ],
  ];
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function ereolen_support_uninstall() {
  $custom_variables = array(
    'ereolen_support_library_description',
    'ereolen_support_library_required',
    'ereolen_support_name_description',
    'ereolen_support_name_required',
    'ereolen_support_email_description',
    'ereolen_support_email_required',
    'ereolen_support_id_description',
    'ereolen_support_id_required',
    'ereolen_support_product_description',
    'ereolen_support_product_description_required',
    'ereolen_support_problem_description',
    'ereolen_support_problem_required',
    'ereolen_support_description_description',
    'ereolen_support_description_required',
    'ereolen_support_date_description',
    'ereolen_support_date_required',
    'ereolen_support_book_title_description',
    'ereolen_support_book_title_required',
    'ereolen_support_device_description',
    'ereolen_support_device_required',
    'ereolen_support_model_description',
    'ereolen_support_model_required',
    'ereolen_support_operating_system_description',
    'ereolen_support_model_operating_system',
    'jira_domain',
    'jira_username',
    'jira_password',
    'jira_project_id',
    'jira_issue_type_id',
    'jira_support_request_type_field_id',
    'jira_support_request_type_field_value',
    'ereolen_support_book_title_jira_field',
    'ereolen_support_device_jira_field',
    'ereolen_support_model_jira_field',
    'ereolen_support_library_jira_field',
    'ereolen_support_id_jira_field',
    'ereolen_support_name_jira_field',
    'ereolen_support_operating_system_jira_field',
    'ereolen_support_problem_jira_field',
    'ereolen_support_product_jira_field',
    'publizon_support_email',
    'ereolen_support_submission_text'
  );

  // Grabbed from variable_del() to avoid clearing cache between each deletion.
  global $conf;
  foreach ($custom_variables as $name) {
    db_delete('variable')
      ->condition('name', $name)
      ->execute();
  }

  // To be sure we do everything like variable_del() we clear cache before
  // proceeding to unset conf.
  cache_clear_all('variables', 'cache_bootstrap');

  foreach ($custom_variables as $name) {
    unset($conf[$name]);
  }
}
